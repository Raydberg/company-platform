services:

  db-postgresql:
    image: postgres:16.1
    container_name: db-companies-prod
    restart: always
    volumes:
      - ./sql/create_schema.sql:/docker-entrypoint-initdb.d/create_schema.sql
      - ./sql/data.sql:/docker-entrypoint-initdb.d/data.sql
    environment:
      POSTGRES_DB: 'company-db-prod'
      POSTGRES_USER: 'company-prod'
      POSTGRES_PASSWORD: '${DB_PASSWORD}'

  mongo-db:
    image: mongo:7.0.5-rc0
    restart: always
    container_name: mongo-db-prod
    hostname: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: reports-prod
    volumes:
      - mongo-data:/data/db
    networks:
      - company-network


  msvc-companies:
    build:
      context: ./msvc-companies
      dockerfile: Dockerfile
    container_name: msvc-companies-prod
    restart: always
    ports:
      - '8080:8080'
    depends_on:
      - db
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/company-db

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.3
    container_name: load-balancer-prod
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - company-network

  kafka:
    image: confluentinc/cp-kafka:7.4.3
    container_name: msg-broker-prod
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - company-network




  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.82.0
    restart: always
    container_name: otel-collector
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./metric_files/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    ports:
      - "1888:1888"
      - "8888:8888"
      - "8889:8889"
      - "13133:13133"
      - "4317:4317"
      - "4318:4318"
      - "55679:55679"
    depends_on:
      - jaeger-all-in-one
      - zipkin-all-in-one

  prometheus:
    container_name: prometheus-prod
    image: prom/prometheus
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=30d
    volumes:
      - ./metric_files/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - company-network

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./metric_files/tempo.yml:/etc/tempo.yml
    ports:
      - "3200:3200"
      - "4317"

  grafana:
    container_name: grafana-prod
    image: grafana/grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - ./metric_files/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - "3000:3000"
    networks:
      - company-network

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - "16686:16686"
      - "14268"
      - "14250"

  zipkin-all-in-one:
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "9411:9411"
networks:
  company-network:
    driver: bridge
volumes:
  mongo-data:
  prometheus-data:
  grafana-data: