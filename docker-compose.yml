services:

  db-postgresql:
    image: postgres:16.1
    container_name: db-postgresql
    restart: always
    volumes:
      - ./sql/create_schema.sql:/docker-entrypoint-initdb.d/create_schema.sql
      - ./sql/data.sql:/docker-entrypoint-initdb.d/data.sql
      - ./sql/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    environment:
      POSTGRES_DB: 'company-db'
      POSTGRES_USER: 'company'
      POSTGRES_PASSWORD: '2025'
    ports:
      - '5432:5432'

  mongo-db:
    image: mongo:7.0.5-rc0
    restart: always
    container_name: mongo-db
    hostname: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: sa
      MONGO_INITDB_ROOT_PASSWORD: sa
      MONGO_INITDB_DATABASE: reports
    ports:
      - "27017:27017"


  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile-dev
    container_name: config-server-dev
    restart: always
    volumes:
      - ./config-server/src:/app/src
    ports:
      - '7777:7777'
    environment:
      - SPRING_PROFILES_ACTIVE=native,dev
      - CONFIG_SERVER_PORT=7777
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7777/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile-dev
    container_name: eureka-server-dev
    restart: always
    ports:
      - '8761:8761'
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  msvc-companies:
    build:
      context: ./msvc-companies
      dockerfile: Dockerfile-dev
    container_name: msvc-companies-dev
    restart: always
    volumes:
      - ./msvc-companies/src:/app/src
      - ./msvc-companies/target:/app/target
    ports:
      - '8080:8080'
    depends_on:
      db-postgresql:
        condition: service_started
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-postgresql:5432/company-db
      - SPRING_CLOUD_CONFIG_URI=http://config-server:7777


  msvc-fallback:
    build:
      context: ./msvc-fallback
      dockerfile: Dockerfile-dev
    container_name: msvc-fallback-dev
    restart: always
    volumes:
      - ./msvc-fallback/src:/app/src
      - ./msvc-fallback/target:/app/target
    ports:
      - '8081:8081'
    depends_on:
      - db-postgresql
    environment:
      - SPRING_PROFILES_ACTIVE=dev

  msvc-report-ms:
    build:
      context: ./msvc-report-ms
      dockerfile: Dockerfile-dev
    container_name: msvc-report-ms-dev
    restart: always
    volumes:
      - ./msvc-report-ms/src:/app/src
      - ./msvc-report-ms/target:/app/target
    ports:
      - '9094:9094'
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_started
      config-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CLOUD_CONFIG_URI=http://config-server:7777
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:29092

  msvc-report-listener:
    build:
      context: ./msvc-report-listener
      dockerfile: Dockerfile-dev
    container_name: msvc-report-listener-dev
    restart: always
    volumes:
      - ./msvc-report-listener/src:/app/src
      - ./msvc-report-listener/target:/app/target
    ports:
      - '9093:9093'
    depends_on:
      kafka:
        condition: service_started
      mongo-db:
        condition: service_started
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATA_MONGODB_HOST=mongo-db
      - SPRING_DATA_MONGODB_PORT=27017
      - SPRING_DATA_MONGODB_DATABASE=sa
      - SPRING_DATA_MONGODB_USERNAME=sa
      - SPRING_DATA_MONGODB_PASSWORD=sa
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_CLOUD_CONFIG_URI=http://config-server:7777
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:29092

  #  msvc-security:
  #    build:
  #      context: ./msvc-security
  #      dockerfile: Dockerfile-dev
  #    container_name: msvc-security-dev
  #    restart: always
  #    volumes:
  #      - ./msvc-security/src:/app/src
  #      - ./msvc-security/target:/app/target
  #    ports:
  #      - '8082:8082'
  #    depends_on:
  #      - db-postgresql
  #    environment:
  #      - SPRING_PROFILES_ACTIVE=dev
  #      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-postgresql:5432/company-db

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile-dev
    container_name: gateway-dev
    restart: always
    volumes:
      - ./gateway/src:/app/src
      - ./gateway/target:/app/target
    ports:
      - '9494:9494'
      - '5005:5005'
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CLOUD_CONFIG_URI=http://config-server:7777
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
  # Dashboard para kafka , balanceador de carga para kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.3
    container_name: load-balancer
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.3
    container_name: msg-broker
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.82.0
    restart: always
    container_name: otel-collector
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./metric_files/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    ports:
      - "1888:1888"
      - "8888:8888"
      - "8889:8889"
      - "13133:13133"
      - "4317:4317"
      - "4318:4318"
      - "55679:55679"
    depends_on:
      - jaeger-all-in-one
      - zipkin-all-in-one

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./metric_files/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./metric_files/tempo.yml:/etc/tempo.yml
    ports:
      - "3200:3200"
      - "4317"

  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - ./metric_files/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - "3000:3000"

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - "16686:16686"
      - "14268"
      - "14250"

  zipkin-all-in-one:
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "9411:9411"

#  sonarqube:
#    image: sonarqube:10.3-community
#    container_name: sonarqube-dev
#    restart: always
#    environment:
#      - SONAR_JDBC_URL=jdbc:postgresql://db-postgresql:5432/sonar
#      - SONAR_JDBC_USERNAME=company
#      - SONAR_JDBC_PASSWORD=2025
#      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
#    ports:
#      - "9000:9000"
#    depends_on:
#      - db-postgresql
#    volumes:
#      - sonarqube_data:/opt/sonarqube/data
#      - sonarqube_extensions:/opt/sonarqube/extensions
#      - sonarqube_logs:/opt/sonarqube/logs
#volumes:
#  sonarqube_data:
#  sonarqube_extensions:
#  sonarqube_logs: